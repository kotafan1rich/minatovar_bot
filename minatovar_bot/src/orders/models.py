import enum

from typing import TYPE_CHECKING

from fastapi import Request
from sqlalchemy import (
    BIGINT,
    Enum,
    Float,
    ForeignKey,
    Index,
    Integer,
    String,
    UniqueConstraint,
)
from sqlalchemy.orm import relationship, Mapped, mapped_column
from src.db.models import BaseModel

if TYPE_CHECKING:
    from src.client.models import User


class OrderStatus(enum.Enum):
    CREATED = "CREATED"
    PAID = "PAID"
    BOUGHT_OUT = "BOUGHT_OUT"
    AGENT = "AGENT"
    CUSTOMS = "CUSTOMS"
    MOSCOW_WAREHOUSE = "MOSCOW_WAREHOUSE"
    TO_PETERSBURG = "TO_PETERSBURG"
    TO_CUSTOMER_CITY = "TO_CUSTOMER_CITY"
    COMPLETED = "COMPLETED"
    CANCELED = "CANCELED"

    def display(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏"""
        display_map = {
            OrderStatus.CREATED: "üôã‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω",
            OrderStatus.PAID: "üí¥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω",
            OrderStatus.BOUGHT_OUT: "‚úàÔ∏è –í—ã–∫—É–ø–ª–µ–Ω",
            OrderStatus.AGENT: "üë®‚Äçüíº –ü–µ—Ä–µ–¥–∞–Ω –ê–≥–µ–Ω—Ç—É",
            OrderStatus.CUSTOMS: "üõÉ –¢–∞–º–æ–∂–Ω—è",
            OrderStatus.MOSCOW_WAREHOUSE: "üì¶ –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ –ú–æ—Å–∫–≤–µ",
            OrderStatus.TO_PETERSBURG: "üöö –ï–¥–µ—Ç –≤ –ü–∏—Ç–µ—Ä",
            OrderStatus.TO_CUSTOMER_CITY: "üì® –ï–¥–µ—Ç –≤ –≥–æ—Ä–æ–¥ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é",
            OrderStatus.COMPLETED: "üè† –ó–∞–≤–µ—Ä—à–µ–Ω",
            OrderStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
        }
        return display_map[self]

    async def __admin_repr__(self, request: Request):
        return self.display()


class OrderTypeItem(enum.Enum):
    SHOES = "SHOES"
    CLOTH = "CLOTH"

    def display(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        display_map = {OrderTypeItem.SHOES: "–û–±—É–≤—å", OrderTypeItem.CLOTH: "–û–¥–µ–∂–¥–∞"}
        return display_map[self]

    async def __admin_repr__(self, request: Request):
        return self.display()


class Referral(BaseModel):
    __tablename__ = "referrals"

    id_from: Mapped[int] = mapped_column(
        BIGINT, ForeignKey("users.user_id", ondelete="CASCADE"), nullable=False
    )
    id_to: Mapped[int] = mapped_column(
        BIGINT,
        ForeignKey("users.user_id", ondelete="CASCADE"),
        nullable=False,
        unique=True,
    )

    referrer: Mapped["User"] = relationship(
        "User",
        foreign_keys=[id_from],
        back_populates="referrals_from",
    )
    referree: Mapped["User"] = relationship(
        "User",
        foreign_keys=[id_to],
        back_populates="referrals_to",
    )

    __table_args__ = (
        UniqueConstraint("id_from", "id_to", name="unique_referral"),
        Index("ix_user_id", "id_from", "id_to"),
    )


class Order(BaseModel):
    __tablename__ = "orders"

    user_id: Mapped[int] = mapped_column(BIGINT, ForeignKey("users.user_id"), nullable=False)
    status: Mapped[OrderStatus] = mapped_column(
        Enum(OrderStatus), default=OrderStatus.CREATED, nullable=False
    )
    article: Mapped[str] = mapped_column(String(255), nullable=False)
    addres: Mapped[str] = mapped_column(String(255), nullable=False)
    price_rub: Mapped[float] = mapped_column(Float, nullable=False, default=0.0)
    price_cny: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    size: Mapped[str] = mapped_column(String(100), nullable=False)
    type_item: Mapped[OrderTypeItem] = mapped_column(
        Enum(OrderTypeItem), default=OrderTypeItem.SHOES, nullable=False
    )

    user = relationship("User", back_populates="orders")
